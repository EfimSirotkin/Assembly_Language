#include "pch.h"
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <math.h>
#include <exception>
#include <iostream>
#include <time.h>
#include <Windows.h>
#define ARRAY_SIZE 10
//#define RAND_MAX 5.5f
#define NULL_POINTER_EXCEPTION 1
#define FAILED 0
#define INT_RANGE_VALUES 100
#define INT_RANGE_BEGINNING 5

enum Switch{ ASCENDING = 1, DESCENDING, RANDOM_FLOAT, RANDOM_INT, MANUAL_INPUT};

void assign_default_values(float* array, int size) {
	if (size && array)
		for (int i = 0; i < size; ++i)
			array[i] = 1;
	else throw NULL_POINTER_EXCEPTION;
}
void assign_random_float_values(float* array, int size) {
	if (size && array)
		for (int i = 0; i < size; ++i)
			array[i] = static_cast <float> (rand()) / static_cast <float> (RAND_MAX/5);
	else throw NULL_POINTER_EXCEPTION;
}
void assign_random_int_values(float* array, int size) {
	if (size && array)
		for (int i = 0; i < size; ++i)
			array[i] = (int)rand() % INT_RANGE_VALUES + INT_RANGE_BEGINNING;
}
void print_array_values(float* array, int size) {
	if (size && array) {
		for (int i = 0; i < size; ++i)
			printf("%lf ", array[i]);
		printf("\n");
	}

	else throw NULL_POINTER_EXCEPTION;
}
void print_result_values(float* array, int size) {
	if(size && array)
	for (int i = 0; i < size; ++i)
		printf("%lf\n", array[i]);
	else throw NULL_POINTER_EXCEPTION;
}
void print_both_array_values(float* prime_array, float* result_array, int size) {
	if (size && prime_array && result_array)
		for (int i = 0; i < size; ++i)
			printf("%lf\t - \t%lf\n", prime_array[i], result_array[i]);
	else throw NULL_POINTER_EXCEPTION;
}
void get_array_by_input(float* array, int size) {
	if (size && array)
		for (int i = 0; i < size; ++i) {
			printf("%d) ", i+1);
			do {
				rewind(stdin);
			} while (!scanf_s("%f", &array[i]));
		}
	else throw NULL_POINTER_EXCEPTION;
}
void assign_ascending_values(float* array, int size) {
	if (size&& array)
		for (int i = 0; i < size; ++i)
			array[i] = i + 1;
	else throw NULL_POINTER_EXCEPTION;
}
void assign_descending_values(float* array, int size) {
	if (size&& array)
		for (int i = 0; i < size; ++i)
			array[i] = size - i;
	else throw NULL_POINTER_EXCEPTION;
}
void print_menu() {
	printf("choose the method of assigning values:\n");
	printf("1) Ascending\n");
	printf("2) Descending\n");
	printf("3) Float random numbers\n");
	printf("4) Int random numbers\n");
	printf("5) Manual input\n");
}
void correct_choice_input(int& choice) {
	printf("Your choice: ");
	do {
		rewind(stdin);
	} while (!scanf_s("%d", &choice) || choice > 5 || choice < 1);
}

int main() {

	srand(static_cast <unsigned> (time(0)));

	int arraySize = ARRAY_SIZE;
	int choice = 0;

	float* myArray = (float*)malloc(ARRAY_SIZE * sizeof(float));
	if (!myArray)
		return FAILED;

	print_menu();
	correct_choice_input(choice);
	try {
		switch (choice) {
		case Switch::ASCENDING:
			assign_ascending_values(myArray, ARRAY_SIZE);
			break;
		case Switch::DESCENDING:
			assign_descending_values(myArray, ARRAY_SIZE);
			break;
		case Switch::RANDOM_FLOAT:
			assign_random_float_values(myArray, ARRAY_SIZE);
			break;
		case Switch::RANDOM_INT:
			assign_random_int_values(myArray, ARRAY_SIZE);
			break;
		case Switch::MANUAL_INPUT:
			get_array_by_input(myArray, ARRAY_SIZE);
			break;
		default:
			printf("Hope that unreacheable statement..");
			
		}
		printf("PRIMARY:\n");
		print_array_values(myArray, ARRAY_SIZE);
	}
	catch (int exNum) {
		printf("NULL POINTER EXCEPTION DETECTED\n");
	}

	float* result = (float*)malloc(ARRAY_SIZE * sizeof(float));
	if (!result)
		return FAILED;
	try {
		assign_default_values(result, ARRAY_SIZE);
		print_array_values(result, ARRAY_SIZE);
	}
	catch (int exNum) {
		printf("NULL POINTER EXCEPTON DETECTED");
		free(myArray);
	}
	__asm {
		xor ecx, ecx
		mov ebx, result
		mov ecx, ARRAY_SIZE
		finit
		mov eax, myArray
		start :
		fld[eax]
			push ecx
			xor ecx, ecx
			mov ecx, ARRAY_SIZE-1
			multiplication :
			fmul[eax]
			loop multiplication
			pop ecx
			add eax, 4
			fstp[ebx]
			add ebx, 4
			dec ecx
			jnz start
			fwait
	}
	printf("\nRESULT:\n");
	print_both_array_values(myArray, result, ARRAY_SIZE);
	free(myArray);
	free(result);
	system("pause>nul");
	return 0;
}
